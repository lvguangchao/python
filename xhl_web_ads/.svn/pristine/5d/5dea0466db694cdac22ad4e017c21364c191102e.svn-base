from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

# 生成orm基类
Base = declarative_base()


class DbPools(object):
    _sessionfactory = None
    _sessionfactory_ads = None
    _sessionfactory_wealth = None

    _sessionfactory_guild = None

    def init(self, cfg):
        url = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8mb4'.format(cfg.mysql_user, cfg.mysql_pass, cfg.mysql_ip,
                                                                      cfg.mysql_port,
                                                                      cfg.dbname)
        self.engine = create_engine(url,
                                    encoding='utf-8', echo=False,
                                    pool_size=100, pool_recycle=3600)  # echo 属性=True 打印出sql

        url_ads = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8mb4'.format(cfg.mysql_user, cfg.mysql_pass, cfg.mysql_ip,
                                                                          cfg.mysql_port,
                                                                          cfg.ads_dbname)
        self.engine_ads = create_engine(url_ads,
                                        encoding='utf-8', echo=False,
                                        pool_size=100, pool_recycle=3600)  # echo 属性=True 打印出sql

        url_wealth = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8mb4'.format(cfg.mysql_user, cfg.mysql_pass,
                                                                             cfg.mysql_ip, cfg.mysql_port,
                                                                             cfg.ads_dbname_wealth)
        self.engine_wealth = create_engine(url_wealth,
                                        encoding='utf-8', echo=False,
                                        pool_size=100, pool_recycle=3600)  # echo 属性=True 打印出sql
        url_guild = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8mb4'.format(cfg.mysql_user, cfg.mysql_pass,
                                                                             cfg.mysql_ip, cfg.mysql_port,
                                                                             cfg.ads_dbname_guild)
        self.engine_guild = create_engine(url_guild,
                                        encoding='utf-8', echo=False,
                                        pool_size=100, pool_recycle=3600)  # echo 属性=True 打印出sql

        url_guild = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8mb4'.format(cfg.mysql_user, cfg.mysql_pass,
                                                                                     cfg.mysql_ip, cfg.mysql_port,
                                                                                     cfg.ads_dbname_guild)
        self.engine_guild = create_engine(url_guild,
                                                encoding='utf-8', echo=False,
                                                pool_size=100, pool_recycle=3600)  # echo 属性=True 打印出sql

    # 创建DBSession类型:
    def get_DBSession(self):
        if not self._sessionfactory:
            self._sessionfactory = scoped_session(sessionmaker(bind=self.engine))  # scoped_session session生命周期管理
        return self._sessionfactory

    def get_Ads_DBSession(self):
        if not self._sessionfactory_ads:
            self._sessionfactory_ads = scoped_session(
                sessionmaker(bind=self.engine_ads))  # scoped_session session生命周期管理
        return self._sessionfactory_ads

    def get_Wealth_DBSession(self):
        if not self._sessionfactory_wealth:
            self._sessionfactory_wealth = scoped_session(
                sessionmaker(bind=self.engine_wealth))  # scoped_session session生命周期管理
        return self._sessionfactory_wealth



    def get_guild_DBSession(self):
            if not self._sessionfactory_guild:
                self._sessionfactory_guild = scoped_session(
                    sessionmaker(bind=self.engine_guild))  # scoped_session session生命周期管理
            return self._sessionfactory_guild



_db = DbPools()
del DbPools


def app_db():
    global _db
    return _db
