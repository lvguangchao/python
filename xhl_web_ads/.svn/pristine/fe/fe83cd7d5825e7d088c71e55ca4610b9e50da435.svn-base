from eom_app.controller.base import SwxJsonHandler
from eom_app.orm.tables import TLogWithdrawAnchor
from eom_app.orm.db import app_db


class LabelClass(object):
    _withdraw = None
    _groupId2unionIdMap = None    #xhl_ads数据库  ads_union_group_id  对应  union_id 的map
    _unionid2nameMap = None    #xhl_guild 数据库  union_id  对应  union_name 的map
    _name2unionidMap = None    #xhl_guild 数据库  union_id  对应  union_name 的map

    @property
    def db(self):
        return app_db().get_DBSession()

    @property
    def db_ads(self):
        return app_db().get_Ads_DBSession()

    @property
    def db_wealth(self):
        return app_db().get_Wealth_DBSession()

    @property
    def db_guild(self):
        return app_db().get_guild_DBSession()


    def TLogWithdrawAnchor(self):
        if self._withdraw is None:
            session = None
            try:
                result = self.db_wealth.query(TLogWithdrawAnchor).all()
                # room_label_list = session.execute(sql).fetchall()
                ret = list()
                if result:
                    for info in result:
                        temp = dict()
                        temp['id'] = info.id
                        temp['user_id'] = info.user_id
                        temp['money'] = info.money
                        temp['sevice_money'] = info.sevice_money
                        temp['money_balance'] = info.money_balance
                        temp['sevice_money_balance'] = info.sevice_money_balance
                        temp['money_rp'] = info.money_rp
                        temp['sevice_money_rp'] = info.sevice_money_rp
                        temp['apply_state'] = info.apply_state
                        ret.append(temp)
                    self._withdraw = ret
                    return ret
                return None
            except Exception as e:

                return None
            finally:
                if session is not None:
                    session.close()
        else:
            return self._withdraw

    ##ads ads_union_group_id  对应  union_id 的map
    def getGroupId2unionId(self):
        if self._groupId2unionIdMap is None:
            try:
                sql='select ads_union_group_id,union_id from ads_union_group'
                results = self.db_ads.execute(sql).fetchall()
                groupId2unionIdMap=dict()
                for r in results:
                    if r[0] is not None and r[0]!="":
                         groupId2unionIdMap[r[0]]=r[1]
                self._groupId2unionIdMap=groupId2unionIdMap
                return groupId2unionIdMap
            except Exception as e:
                return None
            finally:
                self.db_ads.close()
        else:
            return self._groupId2unionIdMap

    # xhl_guild 数据库  union_id   对应  union_name 的map
    # xhl_guild 数据库  union_name 对应 union_id  的map
    def unionid2nameMap(self):
        if self._unionid2nameMap is None or self._name2unionidMap is None:
            try:
                sql='select union_id,union_name from base_union'
                results = self.db_guild.execute(sql).fetchall()
                unionid2nameMap=dict()
                name2unionidMap=dict()
                for r in results:
                    if r[0] is not None and r[0]!="":
                         unionid2nameMap[r[0]]=r[1]
                    if r[1] is not None and r[1]!="":
                         name2unionidMap[r[1]]=r[0]
                self._unionid2nameMap=unionid2nameMap
                self._name2unionidMap=name2unionidMap
                return unionid2nameMap,name2unionidMap
            except Exception as e:
                print(e)
                return None
            finally:
                self.db_guild.close()
        else:
            return self._unionid2nameMap,self._name2unionidMap





_withdraw = LabelClass()
del LabelClass


def app_map():
    global _withdraw
    return _withdraw
